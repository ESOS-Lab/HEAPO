diff -urN linux-2.6.32/arch/x86/include/asm/unistd_64.h linux-2.6.32-POS/arch/x86/include/asm/unistd_64.h
--- linux-2.6.32/arch/x86/include/asm/unistd_64.h	2009-12-02 19:51:21.000000000 -0800
+++ linux-2.6.32-POS/arch/x86/include/asm/unistd_64.h	2012-01-05 20:57:13.692319206 -0800
@@ -662,6 +662,22 @@
 #define __NR_perf_event_open			298
 __SYSCALL(__NR_perf_event_open, sys_perf_event_open)
 
+// POS (Taeho Hwang)
+#define __NR_pos_create				299
+__SYSCALL(__NR_pos_create, sys_pos_create)
+#define __NR_pos_delete				300
+__SYSCALL(__NR_pos_delete, sys_pos_delete)
+#define __NR_pos_map				301
+__SYSCALL(__NR_pos_map, sys_pos_map)
+#define __NR_pos_unmap				302
+__SYSCALL(__NR_pos_unmap, sys_pos_unmap)
+#define __NR_pos_seg_alloc			303
+__SYSCALL(__NR_pos_seg_alloc, sys_pos_seg_alloc)
+#define __NR_pos_seg_free			304
+__SYSCALL(__NR_pos_seg_free, sys_pos_seg_free)
+#define __NR_pos_is_mapped			305
+__SYSCALL(__NR_pos_is_mapped, sys_pos_is_mapped)
+
 #ifndef __NO_STUBS
 #define __ARCH_WANT_OLD_READDIR
 #define __ARCH_WANT_OLD_STAT
diff -urN linux-2.6.32/arch/x86/kernel/sys_x86_64.c linux-2.6.32-POS/arch/x86/kernel/sys_x86_64.c
--- linux-2.6.32/arch/x86/kernel/sys_x86_64.c	2009-12-02 19:51:21.000000000 -0800
+++ linux-2.6.32-POS/arch/x86/kernel/sys_x86_64.c	2012-01-05 20:57:13.702314639 -0800
@@ -157,7 +157,9 @@
 		goto bottomup;
 
 	/* requesting a specific address */
-	if (addr) {
+	// POS (Taeho Hwang)
+	//if (addr) {
+	if (addr && addr < mm->mmap_base) {
 		addr = PAGE_ALIGN(addr);
 		vma = find_vma(mm, addr);
 		if (TASK_SIZE - len >= addr &&
diff -urN linux-2.6.32/arch/x86/mm/mmap.c linux-2.6.32-POS/arch/x86/mm/mmap.c
--- linux-2.6.32/arch/x86/mm/mmap.c	2009-12-02 19:51:21.000000000 -0800
+++ linux-2.6.32-POS/arch/x86/mm/mmap.c	2012-01-05 20:57:13.734217099 -0800
@@ -31,6 +31,9 @@
 #include <linux/sched.h>
 #include <asm/elf.h>
 
+// POS (Taeho Hwang)
+#include <linux/pos.h>
+
 static unsigned int stack_maxrandom_size(void)
 {
 	unsigned int max = 0;
@@ -94,6 +97,12 @@
 	return rnd << PAGE_SHIFT;
 }
 
+// POS (Taeho Hwang)
+unsigned long min_gap()
+{
+	return MIN_GAP;
+}
+
 static unsigned long mmap_base(void)
 {
 	unsigned long gap = current->signal->rlim[RLIMIT_STACK].rlim_cur;
@@ -103,7 +112,9 @@
 	else if (gap > MAX_GAP)
 		gap = MAX_GAP;
 
-	return PAGE_ALIGN(TASK_SIZE - gap - mmap_rnd());
+	// POS (Taeho Hwang)
+	//return PAGE_ALIGN(TASK_SIZE - gap - mmap_rnd());
+	return PAGE_ALIGN(TASK_SIZE - gap - POS_AREA_SIZE - mmap_rnd()); // 32TB reservation
 }
 
 /*
diff -urN linux-2.6.32/fs/binfmt_elf.c linux-2.6.32-POS/fs/binfmt_elf.c
--- linux-2.6.32/fs/binfmt_elf.c	2009-12-02 19:51:21.000000000 -0800
+++ linux-2.6.32-POS/fs/binfmt_elf.c	2012-01-09 06:38:19.923309148 -0800
@@ -35,6 +35,11 @@
 #include <asm/param.h>
 #include <asm/page.h>
 
+
+// POS (Taeho Hwang)
+#include <linux/pos.h>
+
+
 static int load_elf_binary(struct linux_binprm *bprm, struct pt_regs *regs);
 static int load_elf_library(struct file *);
 static unsigned long elf_map(struct file *, unsigned long, struct elf_phdr *,
@@ -355,6 +360,56 @@
 
 #endif /* !elf_map */
 
+
+// POS (Taeho Hwang)
+static unsigned long pos_elf_map(struct file *filep, unsigned long addr,
+		struct elf_phdr *eppnt, int prot, int type)
+{
+	struct vm_area_struct *vma;
+	unsigned long vm_flags = 0;
+	unsigned long size = eppnt->p_filesz + ELF_PAGEOFFSET(eppnt->p_vaddr);
+	unsigned long off = eppnt->p_offset - ELF_PAGEOFFSET(eppnt->p_vaddr);
+	addr = ELF_PAGESTART(addr);
+	size = ELF_PAGEALIGN(size);
+
+	/* mmap() will return -EINVAL if given a zero size, but a
+	 * segment with zero filesize is perfectly valid */
+	if (!size)
+		return addr;
+
+	down_write(&current->mm->mmap_sem);
+	
+	vm_flags = VM_READ|VM_WRITE|VM_SHARED|VM_POS_SECTION;
+	
+	vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);
+	if (unlikely(vma == NULL))
+		return POS_ERROR;
+
+	vma->vm_mm = current->mm;
+	vma->vm_start = addr;
+	vma->vm_end = addr+size;
+
+	vma->vm_flags = vm_flags ;
+	vma->vm_page_prot = vm_get_page_prot(vma->vm_flags);
+
+	vma->vm_ops = NULL;
+	//vma->vm_private_data = (void *)pos_vma;
+	vma->vm_file = filep;
+	vma->vm_pgoff = off >> PAGE_SHIFT;
+
+	if (unlikely(insert_vm_struct(current->mm, vma))) {
+		kmem_cache_free(vm_area_cachep, vma);
+		return POS_ERROR;
+	}
+
+	current->mm->map_count++;
+	current->mm->total_vm += (vma->vm_end-vma->vm_start)>>PAGE_SHIFT;
+
+	up_write(&current->mm->mmap_sem);
+	return addr;
+}
+
+
 static unsigned long total_mapping_size(struct elf_phdr *cmds, int nr)
 {
 	int i, first_idx = -1, last_idx = -1;
@@ -582,6 +637,10 @@
 		struct elfhdr interp_elf_ex;
 	} *loc;
 
+	// POS (Taeho Hwang)
+	int cnt_load = 0;
+
+
 	loc = kmalloc(sizeof(*loc), GFP_KERNEL);
 	if (!loc) {
 		retval = -ENOMEM;
@@ -829,8 +888,19 @@
 #endif
 		}
 
-		error = elf_map(bprm->file, load_bias + vaddr, elf_ppnt,
-				elf_prot, elf_flags, 0);
+
+		// POS (Taeho Hwang)
+		cnt_load++;
+		//if (cnd_load == 3 && elf_ppnt->p_vaddr < TASK_SIZE)
+		if (cnt_load == 3 && elf_ppnt->p_vaddr < 0x7FFFFFFFFFFF) {
+			error = pos_elf_map(bprm->file, load_bias + vaddr, elf_ppnt, elf_prot, elf_flags);
+		} else {
+			error = elf_map(bprm->file, load_bias + vaddr, elf_ppnt, elf_prot, elf_flags, 0);
+		}
+		//error = elf_map(bprm->file, load_bias + vaddr, elf_ppnt,
+		//		elf_prot, elf_flags, 0);
+
+
 		if (BAD_ADDR(error)) {
 			send_sig(SIGKILL, current, 0);
 			retval = IS_ERR((void *)error) ?
diff -urN linux-2.6.32/fs/inode.c linux-2.6.32-POS/fs/inode.c
--- linux-2.6.32/fs/inode.c	2009-12-02 19:51:21.000000000 -0800
+++ linux-2.6.32-POS/fs/inode.c	2012-01-05 21:12:47.322581262 -0800
@@ -38,6 +38,11 @@
  */
 #include <linux/buffer_head.h>
 
+
+// POS (Taeho Hwang)
+#include <linux/pos.h>
+
+
 /*
  * New inode.c implementation.
  *
@@ -1325,6 +1330,10 @@
 
 	if (op && op->drop_inode)
 		drop = op->drop_inode;
+
+	// POS (Taeho Hwang)
+	pos_find_and_remove_pval_desc(inode);
+
 	drop(inode);
 }
 
diff -urN linux-2.6.32/include/linux/mm.h linux-2.6.32-POS/include/linux/mm.h
--- linux-2.6.32/include/linux/mm.h	2009-12-02 19:51:21.000000000 -0800
+++ linux-2.6.32-POS/include/linux/mm.h	2012-01-05 21:02:39.813003379 -0800
@@ -106,6 +106,11 @@
 #define VM_PFN_AT_MMAP	0x40000000	/* PFNMAP vma that is fully mapped at mmap time */
 #define VM_MERGEABLE	0x80000000	/* KSM may merge identical pages */
 
+
+// POS (Taeho Hwang)
+#define VM_POS_SECTION	0x000100000000
+
+
 #ifndef VM_STACK_DEFAULT_FLAGS		/* arch can override this */
 #define VM_STACK_DEFAULT_FLAGS VM_DATA_DEFAULT_FLAGS
 #endif
@@ -697,6 +702,9 @@
 #define VM_FAULT_WRITE	0x0008	/* Special case for get_user_pages */
 #define VM_FAULT_HWPOISON 0x0010	/* Hit poisoned page */
 
+// POS (Taeho Hwang)
+#define VM_FAULT_POS	0x0020
+
 #define VM_FAULT_NOPAGE	0x0100	/* ->fault installed the pte, not return page */
 #define VM_FAULT_LOCKED	0x0200	/* ->fault locked the returned page */
 
diff -urN linux-2.6.32/include/linux/syscalls.h linux-2.6.32-POS/include/linux/syscalls.h
--- linux-2.6.32/include/linux/syscalls.h	2009-12-02 19:51:21.000000000 -0800
+++ linux-2.6.32-POS/include/linux/syscalls.h	2012-01-05 20:57:13.734217099 -0800
@@ -879,4 +879,14 @@
 asmlinkage long sys_perf_event_open(
 		struct perf_event_attr __user *attr_uptr,
 		pid_t pid, int cpu, int group_fd, unsigned long flags);
+
+// POS (Taeho Hwang)
+asmlinkage void *sys_pos_create(char *name);
+asmlinkage int sys_pos_delete(char *name);
+asmlinkage void *sys_pos_map(char *name);
+asmlinkage int sys_pos_unmap(char *name);
+asmlinkage void *sys_pos_seg_alloc(char *name, unsigned long len);
+asmlinkage int sys_pos_seg_free(char *name, void *addr, unsigned long len);
+asmlinkage void *sys_pos_is_mapped(char *name);
+
 #endif
diff -urN linux-2.6.32/init/main.c linux-2.6.32-POS/init/main.c
--- linux-2.6.32/init/main.c	2009-12-02 19:51:21.000000000 -0800
+++ linux-2.6.32-POS/init/main.c	2012-01-05 20:57:13.734217099 -0800
@@ -77,6 +77,9 @@
 #include <asm/sections.h>
 #include <asm/cacheflush.h>
 
+// POS (Taeho Hwang)
+#include <linux/pos.h>
+
 #ifdef CONFIG_X86_LOCAL_APIC
 #include <asm/smp.h>
 #endif
@@ -683,6 +686,9 @@
 
 	ftrace_init();
 
+	// POS (Taeho Hwang)
+	pos_init();
+
 	/* Do the rest non-__init'ed, we're now alive */
 	rest_init();
 }
diff -urN linux-2.6.32/mm/Makefile linux-2.6.32-POS/mm/Makefile
--- linux-2.6.32/mm/Makefile	2009-12-02 19:51:21.000000000 -0800
+++ linux-2.6.32-POS/mm/Makefile	2012-01-11 09:36:23.994114768 -0800
@@ -11,7 +11,7 @@
 			   maccess.o page_alloc.o page-writeback.o \
 			   readahead.o swap.o truncate.o vmscan.o shmem.o \
 			   prio_tree.o util.o mmzone.o vmstat.o backing-dev.o \
-			   page_isolation.o mm_init.o mmu_context.o \
+			   page_isolation.o mm_init.o mmu_context.o pos.o pos_namespace.o \
 			   $(mmu-y)
 obj-y += init-mm.o
 
diff -urN linux-2.6.32/mm/memory.c linux-2.6.32-POS/mm/memory.c
--- linux-2.6.32/mm/memory.c	2009-12-02 19:51:21.000000000 -0800
+++ linux-2.6.32-POS/mm/memory.c	2012-01-05 21:11:40.082978518 -0800
@@ -64,6 +64,9 @@
 #include <asm/tlbflush.h>
 #include <asm/pgtable.h>
 
+// POS (Taeho Hwang)
+#include <linux/pos.h>
+
 #include "internal.h"
 
 #ifndef CONFIG_NEED_MULTIPLE_NODES
@@ -2940,6 +2943,15 @@
 	entry = *pte;
 	if (!pte_present(entry)) {
 		if (pte_none(entry)) {
+			
+			// POS (Taeho Hwang)
+			if (POS_AREA_START <= address && address < POS_AREA_END)
+				return do_pos_area_fault(mm, vma, address, pmd, entry);
+			
+			// POS (Taeho Hwang)
+			if (vma->vm_flags & VM_POS_SECTION)
+				return do_pos_section_fault(mm, vma, address, pmd, entry);
+
 			if (vma->vm_ops) {
 				if (likely(vma->vm_ops->fault))
 					return do_linear_fault(mm, vma, address,
